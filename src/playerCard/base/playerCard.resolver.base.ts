/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePlayerCardArgs } from "./CreatePlayerCardArgs";
import { UpdatePlayerCardArgs } from "./UpdatePlayerCardArgs";
import { DeletePlayerCardArgs } from "./DeletePlayerCardArgs";
import { PlayerCardFindManyArgs } from "./PlayerCardFindManyArgs";
import { PlayerCardFindUniqueArgs } from "./PlayerCardFindUniqueArgs";
import { PlayerCard } from "./PlayerCard";
import { PlayerCardService } from "../playerCard.service";

@graphql.Resolver(() => PlayerCard)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PlayerCardResolverBase {
  constructor(
    protected readonly service: PlayerCardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerCard",
    action: "read",
    possession: "any",
  })
  async _playerCardsMeta(
    @graphql.Args() args: PlayerCardFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerCard])
  @nestAccessControl.UseRoles({
    resource: "PlayerCard",
    action: "read",
    possession: "any",
  })
  async playerCards(
    @graphql.Args() args: PlayerCardFindManyArgs
  ): Promise<PlayerCard[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerCard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerCard",
    action: "read",
    possession: "own",
  })
  async playerCard(
    @graphql.Args() args: PlayerCardFindUniqueArgs
  ): Promise<PlayerCard | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerCard)
  @nestAccessControl.UseRoles({
    resource: "PlayerCard",
    action: "create",
    possession: "any",
  })
  async createPlayerCard(
    @graphql.Args() args: CreatePlayerCardArgs
  ): Promise<PlayerCard> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerCard)
  @nestAccessControl.UseRoles({
    resource: "PlayerCard",
    action: "update",
    possession: "any",
  })
  async updatePlayerCard(
    @graphql.Args() args: UpdatePlayerCardArgs
  ): Promise<PlayerCard | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerCard)
  @nestAccessControl.UseRoles({
    resource: "PlayerCard",
    action: "delete",
    possession: "any",
  })
  async deletePlayerCard(
    @graphql.Args() args: DeletePlayerCardArgs
  ): Promise<PlayerCard | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
