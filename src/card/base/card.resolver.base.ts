/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCardArgs } from "./CreateCardArgs";
import { UpdateCardArgs } from "./UpdateCardArgs";
import { DeleteCardArgs } from "./DeleteCardArgs";
import { CardFindManyArgs } from "./CardFindManyArgs";
import { CardFindUniqueArgs } from "./CardFindUniqueArgs";
import { Card } from "./Card";
import { CardService } from "../card.service";

@graphql.Resolver(() => Card)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CardResolverBase {
  constructor(
    protected readonly service: CardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "read",
    possession: "any",
  })
  async _cardsMeta(
    @graphql.Args() args: CardFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Card])
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "read",
    possession: "any",
  })
  async cards(@graphql.Args() args: CardFindManyArgs): Promise<Card[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Card, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "read",
    possession: "own",
  })
  async card(@graphql.Args() args: CardFindUniqueArgs): Promise<Card | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Card)
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "create",
    possession: "any",
  })
  async createCard(@graphql.Args() args: CreateCardArgs): Promise<Card> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Card)
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "update",
    possession: "any",
  })
  async updateCard(@graphql.Args() args: UpdateCardArgs): Promise<Card | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Card)
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "delete",
    possession: "any",
  })
  async deleteCard(@graphql.Args() args: DeleteCardArgs): Promise<Card | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
