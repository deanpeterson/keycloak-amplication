/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumCardCardType } from "./EnumCardCardType";
import { IsEnum, IsOptional } from "class-validator";
import { JsonFilter } from "../../util/JsonFilter";
import { Type } from "class-transformer";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { EnumCardRarity } from "./EnumCardRarity";
@InputType()
class CardWhereInput {
  @ApiProperty({
    required: false,
    enum: EnumCardCardType,
  })
  @IsEnum(EnumCardCardType)
  @IsOptional()
  @Field(() => EnumCardCardType, {
    nullable: true,
  })
  cardType?: "monster" | "hero";

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  equippableModifier?: JsonFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  nonEquippableModifier?: JsonFilter;

  @ApiProperty({
    required: false,
    enum: EnumCardRarity,
  })
  @IsEnum(EnumCardRarity)
  @IsOptional()
  @Field(() => EnumCardRarity, {
    nullable: true,
  })
  rarity?: "common" | "uncommon" | "rare" | "legendary";
}
export { CardWhereInput };
