/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGameMetricArgs } from "./CreateGameMetricArgs";
import { UpdateGameMetricArgs } from "./UpdateGameMetricArgs";
import { DeleteGameMetricArgs } from "./DeleteGameMetricArgs";
import { GameMetricFindManyArgs } from "./GameMetricFindManyArgs";
import { GameMetricFindUniqueArgs } from "./GameMetricFindUniqueArgs";
import { GameMetric } from "./GameMetric";
import { GameMetricService } from "../gameMetric.service";

@graphql.Resolver(() => GameMetric)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class GameMetricResolverBase {
  constructor(
    protected readonly service: GameMetricService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameMetric",
    action: "read",
    possession: "any",
  })
  async _gameMetricsMeta(
    @graphql.Args() args: GameMetricFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameMetric])
  @nestAccessControl.UseRoles({
    resource: "GameMetric",
    action: "read",
    possession: "any",
  })
  async gameMetrics(
    @graphql.Args() args: GameMetricFindManyArgs
  ): Promise<GameMetric[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameMetric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameMetric",
    action: "read",
    possession: "own",
  })
  async gameMetric(
    @graphql.Args() args: GameMetricFindUniqueArgs
  ): Promise<GameMetric | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameMetric)
  @nestAccessControl.UseRoles({
    resource: "GameMetric",
    action: "create",
    possession: "any",
  })
  async createGameMetric(
    @graphql.Args() args: CreateGameMetricArgs
  ): Promise<GameMetric> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameMetric)
  @nestAccessControl.UseRoles({
    resource: "GameMetric",
    action: "update",
    possession: "any",
  })
  async updateGameMetric(
    @graphql.Args() args: UpdateGameMetricArgs
  ): Promise<GameMetric | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameMetric)
  @nestAccessControl.UseRoles({
    resource: "GameMetric",
    action: "delete",
    possession: "any",
  })
  async deleteGameMetric(
    @graphql.Args() args: DeleteGameMetricArgs
  ): Promise<GameMetric | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
